package com.cyberflux.qwinai.utils

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.text.SpannableString
import android.text.style.ReplacementSpan
import android.text.Spanned
import android.graphics.Canvas
import android.graphics.Paint
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.ContextCompat
import com.cyberflux.qwinai.R
import io.noties.markwon.AbstractMarkwonPlugin
import io.noties.markwon.MarkwonConfiguration
import io.noties.markwon.MarkwonVisitor
import io.noties.markwon.SpannableBuilder
import io.noties.markwon.core.spans.CodeBlockSpan
import org.commonmark.node.FencedCodeBlock
import timber.log.Timber

/**
 * Custom code block renderer that uses the item_code_block layout
 * with integrated syntax highlighting for beautiful code display
 */
class CustomCodeBlockRenderer(private val context: Context) : AbstractMarkwonPlugin() {

    override fun configureVisitor(builder: MarkwonVisitor.Builder) {
        builder.on(FencedCodeBlock::class.java) { visitor, fencedCodeBlock ->
            val language = fencedCodeBlock.info?.trim() ?: ""
            val code = fencedCodeBlock.literal?.trim() ?: ""
            
            // Create custom code block span that uses our layout
            val span = CustomCodeBlockSpan(context, language, code)
            visitor.builder().setSpan(span, visitor.builder().length, visitor.builder().length)
            
            // Add a placeholder character that the span will replace
            visitor.builder().append("\uFFFC") // Object replacement character
        }
    }
}

/**
 * Custom span that renders code blocks using the item_code_block layout
 */
class CustomCodeBlockSpan(
    private val context: Context,
    private val language: String,
    private val code: String
) : ReplacementSpan() {

    override fun getSize(paint: Paint, text: CharSequence?, start: Int, end: Int, fm: Paint.FontMetricsInt?): Int {
        // Return width of placeholder text
        return paint.measureText("[CODE_BLOCK]").toInt()
    }

    override fun draw(canvas: Canvas, text: CharSequence?, start: Int, end: Int, x: Float, top: Int, y: Int, bottom: Int, paint: Paint) {
        // Draw placeholder text - the actual view will be inserted by the adapter
        paint.color = 0xFF666666.toInt()
        canvas.drawText("[CODE_$language]", x, y.toFloat(), paint)
    }

    /**
     * Create and return the custom code block view
     */
    fun createCodeBlockView(parent: ViewGroup): View {
        val inflater = LayoutInflater.from(context)
        val codeBlockView = inflater.inflate(R.layout.item_code_block, parent, false)
        
        setupCodeBlockView(codeBlockView)
        return codeBlockView
    }
    
    /**
     * Setup the code block view with syntax highlighting and functionality
     */
    fun setupCodeBlockView(view: View) {
        val tvLanguage = view.findViewById<TextView>(R.id.tvLanguage)
        val tvCodeContent = view.findViewById<TextView>(R.id.tvCodeContent)
        val btnCopyCode = view.findViewById<LinearLayout>(R.id.btnCopyCode)
        val copyIcon = view.findViewById<ImageView>(R.id.copyIcon)
        val copyText = view.findViewById<TextView>(R.id.copyText)
        
        // Set language label
        tvLanguage.text = if (language.isNotEmpty()) {
            language.lowercase().replaceFirstChar { it.uppercase() }
        } else {
            "Text"
        }
        
        // Apply syntax highlighting to code content
        val highlightedCode = try {
            CodeSyntaxHighlighter.highlight(context, code, language)
        } catch (e: Exception) {
            Timber.w("Syntax highlighting failed for language '$language': ${e.message}")
            SpannableString(code)
        }
        
        tvCodeContent.text = highlightedCode
        
        // Setup copy functionality
        setupCopyFunctionality(btnCopyCode, copyIcon, copyText, code)
        
        // Optimize TextView for code display
        optimizeCodeTextView(tvCodeContent)
    }
    
    /**
     * Setup copy to clipboard functionality with visual feedback
     */
    private fun setupCopyFunctionality(
        btnCopyCode: LinearLayout,
        copyIcon: ImageView,
        copyText: TextView,
        code: String
    ) {
        btnCopyCode.setOnClickListener {
            try {
                val clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                val clip = ClipData.newPlainText("Code", code)
                clipboard.setPrimaryClip(clip)
                
                // Visual feedback
                showCopySuccess(copyIcon, copyText)
                
                // Toast feedback
                Toast.makeText(context, "Code copied to clipboard", Toast.LENGTH_SHORT).show()
                
            } catch (e: Exception) {
                Timber.e(e, "Failed to copy code to clipboard")
                Toast.makeText(context, "Failed to copy code", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    /**
     * Show visual feedback when code is copied
     */
    private fun showCopySuccess(copyIcon: ImageView, copyText: TextView) {
        val originalIconTint = copyIcon.imageTintList
        val originalTextColor = copyText.currentTextColor
        
        // Change to success color
        val successColor = ContextCompat.getColor(context, R.color.code_builtin) // Blue color
        copyIcon.imageTintList = ContextCompat.getColorStateList(context, R.color.code_builtin)
        copyText.setTextColor(successColor)
        copyText.text = "Copied!"
        
        // Reset after 2 seconds
        copyIcon.postDelayed({
            copyIcon.imageTintList = originalIconTint
            copyText.setTextColor(originalTextColor)
            copyText.text = "Copy"
        }, 2000)
    }
    
    /**
     * Optimize TextView settings for code display
     */
    private fun optimizeCodeTextView(textView: TextView) {
        // Ensure proper monospace font
        textView.typeface = android.graphics.Typeface.MONOSPACE
        
        // Optimize for code display
        textView.setHorizontallyScrolling(true)
        textView.breakStrategy = android.text.Layout.BREAK_STRATEGY_SIMPLE
        textView.hyphenationFrequency = android.text.Layout.HYPHENATION_FREQUENCY_NONE
        
        // Enable text selection for copying individual parts
        textView.setTextIsSelectable(true)
        
        // Optimize for performance
        textView.setLayerType(View.LAYER_TYPE_HARDWARE, null)
    }
}

/**
 * Extension function to easily integrate custom code blocks into markdown processing
 */
fun io.noties.markwon.Markwon.Builder.useCustomCodeBlocks(context: Context): io.noties.markwon.Markwon.Builder {
    return this.usePlugin(CustomCodeBlockRenderer(context))
}