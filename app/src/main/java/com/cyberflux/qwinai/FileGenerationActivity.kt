package com.cyberflux.qwinai

import android.os.Bundle
import android.widget.Toast
import com.cyberflux.qwinai.utils.BaseThemedActivity
import androidx.lifecycle.lifecycleScope
import com.cyberflux.qwinai.tools.DocumentRequest
import com.cyberflux.qwinai.tools.FileGenerationTool
import com.cyberflux.qwinai.ui.FileGenerationDialog
import com.google.android.material.button.MaterialButton
import kotlinx.coroutines.launch

class FileGenerationActivity : BaseThemedActivity() {

    private lateinit var fileGenerationTool: FileGenerationTool

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_file_generation)

        fileGenerationTool = FileGenerationTool(this)

        setupUI()
    }

    private fun setupUI() {
        findViewById<MaterialButton>(R.id.btnGenerateFile).setOnClickListener {
            showFileGenerationDialog()
        }

        findViewById<MaterialButton>(R.id.btnQuickPDF).setOnClickListener {
            generateQuickPDF()
        }

        findViewById<MaterialButton>(R.id.btnQuickExcel).setOnClickListener {
            generateQuickExcel()
        }

        findViewById<MaterialButton>(R.id.btnQuickCSV).setOnClickListener {
            generateQuickCSV()
        }
    }

    private fun showFileGenerationDialog() {
        val dialog = FileGenerationDialog(this) { request ->
            generateFile(request)
        }
        dialog.show()
    }

    private fun generateFile(request: DocumentRequest) {
        lifecycleScope.launch {
            try {
                val result = fileGenerationTool.generateFile(request)
                if (result.success) {
                    Toast.makeText(
                        this@FileGenerationActivity,
                        "File generated: ${result.fileName}",
                        Toast.LENGTH_LONG
                    ).show()
                    
                    // Open the file
                    fileGenerationTool.openFile(result)
                } else {
                    Toast.makeText(
                        this@FileGenerationActivity,
                        "Error: ${result.error}",
                        Toast.LENGTH_LONG
                    ).show()
                }
            } catch (e: Exception) {
                Toast.makeText(
                    this@FileGenerationActivity,
                    "Error generating file: ${e.message}",
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }

    private fun generateQuickPDF() {
        val request = DocumentRequest(
            type = "pdf",
            title = "Sample PDF Document",
            content = """
                This is a sample PDF document generated by Qwin AI.
                
                The document demonstrates the PDF generation capabilities of the app.
                You can create professional-looking documents with custom formatting,
                metadata, and content.
                
                Features:
                • Custom fonts and sizing
                • Multiple page support
                • Rich text formatting
                • Table support
                • Metadata embedding
                
                This file was generated automatically using the File Generation Tool.
            """.trimIndent()
        )
        generateFile(request)
    }

    private fun generateQuickExcel() {
        val headers = listOf("Name", "Age", "City", "Score")
        val data = listOf(
            mapOf("Name" to "John Doe", "Age" to 30, "City" to "New York", "Score" to 95.5),
            mapOf("Name" to "Jane Smith", "Age" to 25, "City" to "Los Angeles", "Score" to 87.2),
            mapOf("Name" to "Bob Johnson", "Age" to 35, "City" to "Chicago", "Score" to 92.1),
            mapOf("Name" to "Alice Brown", "Age" to 28, "City" to "Houston", "Score" to 89.7),
            mapOf("Name" to "Charlie Wilson", "Age" to 32, "City" to "Phoenix", "Score" to 94.3)
        )

        val request = DocumentRequest(
            type = "xlsx",
            title = "Sample Data Report",
            headers = headers,
            data = data
        )
        generateFile(request)
    }

    private fun generateQuickCSV() {
        val headers = listOf("Product", "Price", "Quantity", "Total")
        val data = listOf(
            mapOf("Product" to "Laptop", "Price" to 999.99, "Quantity" to 2, "Total" to 1999.98),
            mapOf("Product" to "Mouse", "Price" to 29.99, "Quantity" to 5, "Total" to 149.95),
            mapOf("Product" to "Keyboard", "Price" to 79.99, "Quantity" to 3, "Total" to 239.97),
            mapOf("Product" to "Monitor", "Price" to 299.99, "Quantity" to 1, "Total" to 299.99),
            mapOf("Product" to "Headphones", "Price" to 199.99, "Quantity" to 2, "Total" to 399.98)
        )

        val request = DocumentRequest(
            type = "csv",
            title = "Sales Report",
            headers = headers,
            data = data
        )
        generateFile(request)
    }
}